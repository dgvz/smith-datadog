#!/usr/bin/env ruby

require 'pp'
require 'dogapi'
require 'sys/proctable'

require 'active_support/inflector'
require 'smith'
require 'smith/commands/common'

class Smith::Datadog

  include Smith::Commands::Common
  include Smith::Logger

  SERVICE_NAME = "smith.agent"
  API_KEY = ENV.fetch('DATADOG_API_KEY')

  def initialize
    @datadog = Dogapi::Client.new(API_KEY)
  end

  def run
    Smith::Messaging::Sender.new(Smith::QueueDefinitions::Agency_control.call) do |queue|
      on_check do |c|
        logger.debug { options.inspect }
        logger.debug { c.inspect }
        @datadog.service_check(SERVICE_NAME, options[:host], c[:alert_type], :message => c[:description], :tags => ["agent:#{c[:service]}"])
      end

      queue.on_error do |_, channel_close|
        logger.fatal { "Channel error: #{channel_close.reply_code}: #{channel_close.reply_text}." }
        Smith.stop
      end

      EM.add_periodic_timer(options[:interval]) { run_check(queue) }
    end
  end

  def run_check(queue)
    @on_check.call(alert(:heartbeat, :running, "smith-datadog heatbeat"))

    queue.on_timeout(options[:timeout]) do |message_id|
      @on_check.call(alert(:agency, :timeout, "Agency timeout."))
    end

    queue.on_reply(:auto_ack => true, :reply_queue_name => "datadog.#{Digest::SHA1.hexdigest($$.to_s)}") do |reply_payload, r|
      check(reply_payload.response).each do |agent|
        @on_check.call(agent)
      end
    end

    queue.consumer_count do |count|
      if count > 0
        queue.publish(Smith::ACL::AgencyCommand.new(:command => 'list', :args => ['-a', '-l']))
      else
        @on_check.call(alert(:agency, :critical, "Agency not running."))
      end
    end
  end

  def on_check(&blk)
    @on_check = blk
  end

  # Checks that the list of agents return from the list command matches
  # the list of know agents and composes an appropriate alert.
  def check(response)
    options[:group].map do |group|
      begin
        group_agents = options[:agents] + agent_group(group)
        running_agents = parse_response(response)

        group_agents.map do |agent_name|
          if running_agents.has_key?(agent_name) && running_agents[agent_name].any? { |a| a[:state] == "running" && running?(a[:pid]) }
            alert(agent_name, :running, "Agent running")
          else
            alert(agent_name, :critical, "Agent not running")
          end
        end
      rescue RuntimeError => e
        alert("Group #{group}: #{e.message}", :critical, e.message)
      end
    end.flatten
  end

  # Returns a Nested hash representing the running agents.
  def parse_response(response)
    split_response = response.split(/\n/).map(&:strip)
    ((/^total/.match(split_response.first)) ? split_response[1..-1] : []).each_with_object(Hash.new { |h,k| h[k] = []}) do |e, acc|
      fields = e.split(/\s +/)
      acc[fields.last] << { :state => fields[0], :uuid => fields[1], :pid => fields[2], :description => fields.last }
    end
  end

  # Construct an alert messages
  def alert(service, state, description, extra={})
    {
      :service => service(service),
      :description => description,
      :alert_type => state(state),
    }.merge(extra).tap { |a| logger.info { "#{a[:service]}: #{state(state)}" } }
  end

  # Return true if the given pid exists in the process table.
  def running?(pid)
    !(pid.nil? || Sys::ProcTable.ps(pid.to_i).nil?)
  end

  # Return the service name
  def service(name)
    "#{SERVICE_NAME.downcase}.#{name.to_s}"
  end

  def state(state)
    {:timeout => 1, :running => 0, :critical => 2}[state]
  end

  def options
    @options ||= begin
      OptionParser.accept(Pathname) {|p,| Pathname.new(p) if p}

      defaults = {:interval => 30, :timeout => 11, :agents => [], :group => [], :tags => [], :host => 'localhost', :port => 5555, :agency_timeout => 60}
      defaults.tap do |options|
        parser = OptionParser.new do |opts|
          opts.separator "\n"
          opts.set_summary_indent "    "

          opts.banner = "\nUsage: #{opts.program_name} OPTIONS"
          opts.on_head "\n  Periodically lists the running agents and sends the result to datadog."

          opts.on("--interval <i>", Integer, "Polling interval in seconds (default #{options[:interval]})") { |t| options[:interval] = t }
          opts.on("--timeout <i>", Integer, "Agency timeout (default #{options[:timeout]})") { |t| options[:interval] = t }
          opts.on("--host <s>", String, "Riemann host (default #{options[:host]})") { |v| options[:host] = v }
          opts.on("--port <i>", Integer, "Riemann port (default #{options[:port]})") { |v| options[:port] = v }
          opts.on("--tags <tag1,tag1,...>", Array, "Tags to add to the alert") { |t| options[:tags] = t }

          opts.on("--agents <agent1,agent2,...>", Array, "Agents to monitor") { |v| options[:agents] + v }
          opts.on("--agent-group  <group name>>", Array, "The name of an 'agent group' to monitor") { |g| options[:group] += g }

          opts.separator "\n"
        end

        parser.parse!
      end
    end
  end
end

checker = Smith::Datadog.new

begin
  include Smith::Logger

  Smith.compile_acls
  Smith.start do
    checker.run
  end
rescue => e
  logger.fatal(e.message)
  logger.fatal("Exiting")
end
